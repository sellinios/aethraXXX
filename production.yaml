apiVersion: v1
kind: Namespace
metadata:
  name: backend

---
apiVersion: v1
kind: Secret
metadata:
  name: django-secret
  namespace: backend
type: Opaque
data:
  SECRET_KEY: eW91ci1hY3R1YWwtc2VjcmV0LWtleQ==
  POSTGRES_DB: YWV0aHJhZGI=
  POSTGRES_USER: c2VsbGluaW9z
  POSTGRES_PASSWORD: ZmFpZHJhMTIzIUAj

---
apiVersion: v1
kind: ConfigMap
metadata:
  name: django-config
  namespace: backend
data:
  DJANGO_SETTINGS_MODULE: "backend.settings"

---
apiVersion: v1
kind: PersistentVolumeClaim
metadata:
  name: postgres-pvc
  namespace: backend
spec:
  accessModes:
    - ReadWriteOnce
  resources:
    requests:
      storage: 1Gi

---
apiVersion: v1
kind: Service
metadata:
  name: postgres
  namespace: backend
spec:
  ports:
    - port: 5432
  selector:
    app: postgres

---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: postgres
  namespace: backend
spec:
  selector:
    matchLabels:
      app: postgres
  strategy:
    type: Recreate
  template:
    metadata:
      labels:
        app: postgres
    spec:
      containers:
        - image: postgis/postgis:16-3.4
          name: postgres
          env:
            - name: POSTGRES_DB
              valueFrom:
                secretKeyRef:
                  name: django-secret
                  key: POSTGRES_DB
            - name: POSTGRES_USER
              valueFrom:
                secretKeyRef:
                  name: django-secret
                  key: POSTGRES_USER
            - name: POSTGRES_PASSWORD
              valueFrom:
                secretKeyRef:
                  name: django-secret
                  key: POSTGRES_PASSWORD
          ports:
            - containerPort: 5432
          volumeMounts:
            - mountPath: /var/lib/postgresql/data
              name: postgres-storage
      volumes:
        - name: postgres-storage
          persistentVolumeClaim:
            claimName: postgres-pvc

---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: django-deployment
  namespace: backend
spec:
  replicas: 3
  selector:
    matchLabels:
      app: django
  template:
    metadata:
      labels:
        app: django
    spec:
      containers:
        - name: django
          image: sellinios/backend:latest
          ports:
            - containerPort: 8000
          env:
            - name: DJANGO_SETTINGS_MODULE
              valueFrom:
                configMapKeyRef:
                  name: django-config
                  key: DJANGO_SETTINGS_MODULE
            - name: DATABASE_URL
              value: "postgres://$(POSTGRES_USER):$(POSTGRES_PASSWORD)@postgres:5432/$(POSTGRES_DB)"
            - name: SECRET_KEY
              valueFrom:
                secretKeyRef:
                  name: django-secret
                  key: SECRET_KEY
            - name: POSTGRES_DB
              valueFrom:
                secretKeyRef:
                  name: django-secret
                  key: POSTGRES_DB
            - name: POSTGRES_USER
              valueFrom:
                secretKeyRef:
                  name: django-secret
                  key: POSTGRES_USER
            - name: POSTGRES_PASSWORD
              valueFrom:
                secretKeyRef:
                  name: django-secret
                  key: POSTGRES_PASSWORD

---
apiVersion: v1
kind: Service
metadata:
  name: django-service
  namespace: backend
spec:
  selector:
    app: django
  ports:
    - protocol: TCP
      port: 80
      targetPort: 8000
  type: ClusterIP

---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: react-deployment
  namespace: backend
spec:
  replicas: 2
  selector:
    matchLabels:
      app: react
  template:
    metadata:
      labels:
        app: react
    spec:
      containers:
        - name: react
          image: sellinios/frontend:latest
          ports:
            - containerPort: 80

---
apiVersion: v1
kind: Service
metadata:
  name: react-service
  namespace: backend
spec:
  selector:
    app: react
  ports:
    - protocol: TCP
      port: 80
      targetPort: 80
  type: ClusterIP

---
apiVersion: cert-manager.io/v1
kind: ClusterIssuer
metadata:
  name: letsencrypt-prod
spec:
  acme:
    server: https://acme-v02.api.letsencrypt.org/directory
    email: lefteris.broker@gmail.com
    privateKeySecretRef:
      name: letsencrypt-prod
    solvers:
    - http01:
        ingress:
          class: nginx

---
apiVersion: networking.k8s.io/v1
kind: Ingress
metadata:
  name: backend-ingress
  namespace: backend
  annotations:
    cert-manager.io/cluster-issuer: letsencrypt-prod
    nginx.ingress.kubernetes.io/rewrite-target: /$2
    nginx.ingress.kubernetes.io/ssl-redirect: "false"
spec:
  ingressClassName: nginx
  rules:
  - host: kairos.gr
    http:
      paths:
      - path: /.well-known/acme-challenge/(.*)
        pathType: Prefix
        backend:
          service:
            name: cm-acme-http-solver-fqd5d
            port:
              number: 8089
      - path: /api(/|$)(.*)
        pathType: Prefix
        backend:
          service:
            name: django-service
            port:
              number: 80
      - path: /static(/|$)(.*)
        pathType: Prefix
        backend:
          service:
            name: django-service
            port:
              number: 80
      - path: /admin(/|$)(.*)
        pathType: Prefix
        backend:
          service:
            name: django-service
            port:
              number: 80
      - path: /(.*)
        pathType: Prefix
        backend:
          service:
            name: react-service
            port:
              number: 80
  tls:
  - hosts:
    - kairos.gr
    secretName: kairos-certificate-tls

---
apiVersion: cert-manager.io/v1
kind: Certificate
metadata:
  name: kairos-certificate
  namespace: backend
spec:
  secretName: kairos-certificate-tls
  issuerRef:
    name: letsencrypt-prod
    kind: ClusterIssuer
  commonName: kairos.gr
  dnsNames:
  - kairos.gr
  privateKey:
    algorithm: RSA
    size: 2048
  duration: 2160h # 90 days
  renewBefore: 360h # 15 days